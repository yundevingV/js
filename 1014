#객체 (Object)

#JavaScript는 많은 객체로 이루어져있다.
#객체란 여러 속성을 하나의 변수에 저장하는 것이다.

let fruit = new Object();
let fruit = {name : "apple",
             color : red};
#이런 방식으로 객체를 생성 할 수 있다.

#객체에는 크게 3가지로 분류 할 수 있다.

#JavaScript 내장객체, 브라우저 내장객체, 사용자 정의객체
#오늘 해볼것은 사용자 정의객체에 대해 해볼 것 이다.

#프로퍼티 (Property)
#뜻대로 객체의 속성을 나타내는 것이다. 크게 두 가지로 나뉜다.
#key값과 value값을 가진다.

let fruit = {name : "apple",
             color : "red"
             };
#여기에선 name과 color가 key값이고 value는 apple과 red이다.

#메소드 (Method)
#객체가 가지고 있는 동작이다.


#객체생성방법

let fruit = {name : "apple",
             color : "red",
             price : 5000
             };
#이런식으로 한번에 만들 수 있고
let fruit = new Object();
fruit.name = "apple";
fruit.color = "red";
fruit.price = 5000;
#이렇게도 선언 할 수 있지만 첫번째방법이 훨씬 더 쉽게 간단하다.

#객체 접근 방법
let fruit = {name : "apple",
             color : "red",
             price : 5000
             };
let fruitname = fruit.name;
let fruitcolor fruit.color;
let fruitprice = fruit.price;
#이렇게 접근하면 된다.

#reduce함수 활용

array.reduce(callbackFunction(previousValue, currentValue, currentIndex, array1), initialValue);
#라는 구문을 가집니다.

#reduce함수는 매개변수로 callbackfunction와 initialValue를 가집니다.
#initialValue는 callbackfunction의 previousValue에 사용될 값입니다.

#previousValue 첫번째 인자 혹은 initialValue.
#currentValue는 현재 배열의 값.
#currentIndex는 현재 배열의 인덱스.

let array = ['apple','banana','circle'];
array.reduce(function(previousValue, currentValue,currentIndex,array1)
{
    console.log(previousValue);
    console.log(currentValue);
    console.log(currentIndex);
    console.log(array1);
})

#실행횟수가 2번 나옵니다. 
#initialValue가 없으면 previousValue가 첫번째 인자가 되어서 currentValue가
#두번째 인자부터 나타내주기때문입니다.
#그래서 콘솔창을 보면 apple이 나오고 그다음엔 prevoiousValue가 undefined가 나옵니다

let array = ['apple','banana','circle'];
array.reduce(function(previousValue, currentValue,currentIndex,array1)
{
    console.log(previousValue);
    console.log(currentValue);
    console.log(currentIndex);
    console.log(array1);
    

},1)

#initialValue를 아무거나 추가해주게되면 currentValue가
#첫번째인자가 되어 3번다 실행됩니다.

let array = ['apple','banana','circle'];
array.reduce(function(previousValue, currentValue,currentIndex,array1)
{
    console.log(previousValue);
    console.log(currentValue);
    console.log(currentIndex);
    console.log(array1);
    return previousValue=previousValue+1;

},1)

#밑에 return값을 매겨서 undifined를 없앨 수 있습니다.

#filter 함수 활용

let newArray = arr.filter(callbackFunction(element, index, array), thisArg);

#매개변수는 콜백함수와 thisArg입니다.
#element는 요소값.
#index는 요소의 인덱스.
#array 사용되는 배열

let array = ['apple','banana','circle'];
let newarray = array.filter(function(element, index, array){
    console.log(element);
    console.log(index);
    console.log(array);
    })
#차례대로 출력됩니다.

#JSON 구조

#JSON은 자바스크립트의 객체 표기법으로 파생된 부분 집합입니다.
#JSON의 구조 : "데이터이름" : "값" 입니다.

let fruit = [{name : "Apple", price: 500},
                     {name : "Banana",price: 5000},
                     {name : "Watermelon", price: 50000}];
#이런식으로 json 구조를 만들 수 있습니다

(function test(){
        let fruit = [{name : "Apple", price: 500},
                     {name : "Banana",price: 5000},
                     {name : "Watermelon", price: 50000}
                    ];
        let newfruit = fruit.filter(function(element){
            console.log(element);
            return element.name == "Apple";
        });
        console.log(newfruit);
        })();
        
#이 코드를 통해 name에 apple이라는 과일을찾을 수 있습니다.

(function test(){
        let fruit = [{name : "Apple", price: 500},
                     {name : "Banana",price: 5000},
                     {name : "Watermelon", price: 50000}
                    ];
        let newfruit = fruit.filter(function(element){
            console.log(element);
            return element.price >= 5000;
        });
        console.log(newfruit);
        })();
 #이 코드를 통해서 가격이 5000원 이상인 과일을 찾아낼 수 있습니다.
 
 (function test(){
        let array = [1,2,3,4,5,7,10];
        let arg = {min : 3, max : 8};
        function arraytest(value){
            return value>=this.min && value<=this.max;
        }
       let newarray = array.filter(arraytest, arg);
       console.log(newarray);
    })();
    
#thisArg 매개변수를 활용해서 3과 7사이의 숫자를 출력하는 코드입니다.


 
